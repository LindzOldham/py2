import numpy as np, pylab as pl, pyfits as py
import pymc
import myEmcee_blobs as myEmcee
import cPickle
from tools import solarmag
from stellarpop import distances
from SampleOpt import AMAOpt
from astLib import astCalc

fp = np.load('/data/ljo31b/EELs/esi/kinematics/inference/results_1.00_lens_bc03_vdfit.npy')
l,m,u = fp
d = np.mean((l,u),axis=0)
dvl,dvs,dsigmal,dsigmas = d.T
vl,vs,sigmal,sigmas = m.T
dsigmas = sigmas*0.05
sigmas /= 100.
sigmal /= 100.
dsigmas /= 100.
dsigmal /= 100.
# remove J1248 as we don't have photometry
sz = np.load('/data/ljo31/Lens/LensParams/SourceRedshiftsUpdated_1.00_lens_vdfit.npy')[()]
lz = np.load('/data/ljo31/Lens/LensParams/LensRedshiftsUpdated_1.00_lens_vdfit.npy')[()]

phot = py.open('/data/ljo31/Lens/LensParams/Phot_2src_huge_new_new.fits')[1].data
names = phot['name']

re,rel,reu = phot['Re v'], phot['Re v lo'], phot['Re v hi']
dre = np.mean((rel,reu),axis=0)
mag,magl,magu = phot['mag v'], phot['mag v lo'], phot['mag v hi']
dmag = np.mean((magl,magu),axis=0)



logSigma, mu, logRe, dlogSigma, dmu, dlogRe = np.load('/data/ljo31b/EELs/esi/kinematics/FP_EELs_mu.npy').T
sz = np.load('/data/ljo31/Lens/LensParams/SourceRedshiftsUpdated_1.00_lens_vdfit.npy')[()]
names = sz.keys()
names.sort()

scales = np.array([astCalc.da(sz[name][0])*1e3*np.pi/180./3600. for name in names])
Re=10**logRe # kpc
dRe = dlogRe*Re
mag = mu - 2.5*np.log10(2.*np.pi*Re**2./scales**2.)
Dl = np.array([astCalc.dl(sz[name][0])*1e6 for name in names])
DM = 5. - 5.*np.log10(Dl)
mag += DM

#pl.figure()
#pl.scatter(logSigma, mag+20, s=40,color='SteelBlue')
#pl.show()

x,y = logSigma, mag+20
dxx,dyy = dlogSigma, dmu
sxx,syy = dxx**2.,dyy**2.
sxy,syx = 0.,0.

x,y,sxx,syy=x[:-1],y[:-1],sxx[:-1],syy[:-1]
#xx,yy,zz,sxx,syy,szz = np.delete(xx,3),np.delete(yy,3),np.delete(zz,3),np.delete(sxx,3),np.delete(syy,3),np.delete(szz,3)

pars, cov = [], []
pars.append(pymc.Uniform('alpha',-10,10 ))
pars.append(pymc.Uniform('beta',-10,10 ))
pars.append(pymc.Uniform('sigma',0,2,value=0.1))
pars.append(pymc.Uniform('tau',0.001,2))
pars.append(pymc.Uniform('mu',-2,2))
cov += [0.5,0.5,0.1,0.1,1.]
optCov = np.array(cov)

@pymc.deterministic
def logP(value=0.,p=pars):
    lp=0.
    alpha,beta,sigma,tau,mu = pars[0].value, pars[1].value,pars[2].value, pars[3].value,pars[4].value
    tau2,sigma2,beta2 = tau**2., sigma**2.,beta**2.
    X = x-mu
    Y = y - alpha - beta*mu
    Sxx = sxx + tau2
    Syy = syy + sigma2 + beta2*tau2
    Sxy = sxy + beta*tau2
    Syx = syx + beta*tau2
    Delta = Syy*X**2. + Sxx*Y**2. - X*Y*(Sxy+Syx)
    Sigma =  Sxx*Syy - Sxy*Syx
    pdf = -0.5*Delta/Sigma- 0.5*np.log(Sigma)
    lp = pdf.sum()
    return lp

@pymc.observed
def likelihood(value=0.,lp=logP):
    return lp

# optimise first!

SS = AMAOpt(pars,[likelihood],[logP],cov=cov)
SS.sample(4000)
lp,trace,det = SS.result()
#pl.figure()
#pl.plot(lp)
#pl.show() 
print 'results from optimisation:'
for i in range(len(pars)):
    pars[i].value = trace[-1,i]
    print "%18s  %8.3f"%(pars[i].__name__,pars[i].value)

print 'new!'
S = myEmcee.Emcee(pars+[likelihood],cov=optCov/5.,nthreads=1,nwalkers=28)
S.sample(1000)
outFile = '/data/ljo31b/EELs/FP/inference/FJ_eels'
f = open(outFile,'wb')
cPickle.dump(S.result(),f,2)
f.close()
result = S.result()
result = np.load(outFile)
lp,trace,dic,_ = result
a1,a2 = np.unravel_index(lp.argmax(),lp.shape)
for i in range(len(pars)):
    pars[i].value = np.median(trace[700:,:,i])
    print "%18s  %8.5f"%(pars[i].__name__,pars[i].value)

pl.figure()
pl.plot(lp[200:])
pl.show()

alpha,beta,sigma,tau,mu = pars[0].value, pars[1].value,pars[2].value, pars[3].value,pars[4].value
da, db = alpha - np.percentile(dic['alpha'][-300:].ravel(),16), beta -np.percentile(dic['beta'][-300:].ravel(),16)
alphai,betai=pars[0].value,pars[1].value

xfit = np.linspace(-0.2,0.6,20)

# make a table
burnin=200
f = trace[burnin:].reshape((trace[burnin:].shape[0]*trace[burnin:].shape[1],trace[burnin:].shape[2]))
fits=np.zeros((len(f),xfit.size))
for j in range(0,len(f)):
    alpha,beta,sigma,tau,mu = f[j]
    fits[j] = beta*(xfit)+alpha

los,meds,ups = np.percentile(f,[16,50,84],axis=0)
los,ups=meds-los,ups-meds
print r'\begin{table}[H]'
print r'\centering'
print r'\begin{tabular}{|ccccccc|}\hline'
print r'Sersic model & age model & $\alpha$ & $\beta$ & $\sigma$ & $\tau$ & $\mu$ \\\hline'
print 'one-component & from photometry & ', '$','%.2f'%meds[0], '_{-','%.2f'%los[0], '}^{+','%.2f'%ups[0],'}$ & $', '%.2f'%meds[1], '_{-','%.2f'%los[1], '}^{+','%.2f'%ups[1],'}$ & $','%.2f'%meds[2], '_{-','%.2f'%los[2], '}^{+','%.2f'%ups[2],'}$ & $','%.2f'%meds[3], '_{-','%.2f'%los[3], '}^{+','%.2f'%ups[3],'}$ & $','%.2f'%meds[4], '_{-','%.2f'%los[4], '}^{+','%.2f'%ups[4],'}$', r'\\'
print r'\end{tabular}'
print r'\end{table}'

# make plots with uncertainties
yfit=meds[1]*(xfit)+meds[0]
lo,med,up = xfit*0.,xfit*0.,xfit*0.
for j in range(xfit.size):
    lo[j],med[j],up[j] = np.percentile(fits[:,j],[16,50,84],axis=0)

pl.figure()
pl.plot(xfit,yfit,'SteelBlue')
pl.fill_between(xfit,yfit,lo,color='LightBlue',alpha=0.5)
pl.fill_between(xfit,yfit,up,color='LightBlue',alpha=0.5)
pl.scatter(x,y,color='SteelBlue')
pl.errorbar(x,y,xerr=sxx,yerr=syy,fmt='o',color='SteelBlue')
pl.xlabel(r'$\log\sigma$')
pl.ylabel(r'M (mag)')
pl.figtext(0.7,0.8,'$a = '+'%.2f'%alphai+'\pm'+'%.2f'%da+'$')
pl.figtext(0.7,0.75,'$b = '+'%.2f'%betai+'\pm'+'%.2f'%db+'$')
pl.xlim([-0.2,0.6])
pl.ylim([-2.5,1])
pl.show()
# run loads of realisations of the EELs models to get covariance



