import numpy as np, pylab as pl, cPickle
from linslens.ClipResult import clipburnin
from astLib import astCalc

name = 'J2228'
lp, trace,det,_ = np.load('/data/ljo31b/EELs/inference/new/result_212_'+name)
a1,a3 = np.unravel_index(lp[:,0].argmax(),lp[:,0].shape)
a2=0

modelname = name+'_lens_chabBC03.model'
filename = '/data/ljo31b/EELs/spsmodels/'+modelname
f = open(filename,'rb')
modelL = cPickle.load(f)
f.close()

f = open(filename.replace('lens','source'),'rb')
modelS = cPickle.load(f)
f.close()

zl = modelL.redshifts[0]
zs = modelS.redshifts[0]

# data
sdssdata = np.load('/data/ljo31/Lens/LensParams/SDSS_phot_dereddened_dict_new.npy')[()]
vkidata = np.load('/data/ljo31/Lens/LensParams/VIK_phot_212_dict_new.npy')[()]

# VIK dust corrections
Ahst = np.load('/data/ljo31/Lens/LensParams/Alambda_hst.npy')[()]
Akeck = np.load('/data/ljo31/Lens/LensParams/Alambda_keck.npy')[()]
magnifications = np.load('/data/ljo31/Lens/LensParams/magnifications_212.npy')[()]
bands = np.load('/data/ljo31/Lens/LensParams/HSTBands.npy')[()]

g,r,i,z,dg,dr,di,dz = sdssdata[name]
v_src,i_src,dv_src,di_src,vi_src,dvi_src, v_lens,i_lens,dv_lens,di_lens,vi_lens,dvi_lens, k_src, dk_src, k_lens, dk_lens = vkidata[name]
v_src, v_lens = v_src - Ahst[name][0], v_lens - Ahst[name][0]
i_src, i_lens = i_src - Ahst[name][1], i_lens - Ahst[name][1]
k_src,k_lens = k_src - Akeck[name], k_lens - Akeck[name]
mu = magnifications[name][0]
Vband = bands[name]+'_ACS'
sdssfilts = ['g_SDSS','r_SDSS','i_SDSS','z_SDSS']
Iband,Kband = 'F814W_ACS','Kp_NIRC2'

data = {}
data['g_SDSS'] = {'mag':g,'sigma':dg}
data['r_SDSS'] = {'mag':r,'sigma':dr}
data['i_SDSS'] = {'mag':i,'sigma':di}
data['z_SDSS'] = {'mag':z,'sigma':dz}
data['v-i lens'] = {'mag':v_lens-i_lens,'sigma':dvi_lens}
data['v-i source'] = {'mag':v_src-i_src,'sigma':dvi_src}
data['v-k lens'] = {'mag':v_lens-k_lens,'sigma':dk_lens}
data['v-k source'] = {'mag':v_src-k_src,'sigma':dk_src}

L = np.array([det[key][a1,0,a3] for key in ['logtau_V lens', 'tau lens', 'age lens','logZ lens']])
S = np.array([det[key][a1,0,a3] for key in ['logtau_V source', 'tau source', 'age source','logZ source']])
M = [det[key][a1,0,a3] for key in ['massL', 'massS']]
doexp = [True,False,False,True]
doexp = np.array(doexp)==True
L[doexp] = 10**L[doexp]
S[doexp] = 10**S[doexp]
l = np.atleast_2d([L])#.T
s = np.atleast_2d([S])#.T
ml,ms = M
mod = []
for f in sdssfilts:
    magl, mags = modelL.models[f].eval(l) -2.5*ml, modelS.models[f].eval(s) - 2.5*ms - 2.5*np.log10(mu)
    flux = 10**(-0.4*magl) + 10**(-0.4*mags)
    mod.append(-2.5*np.log10(flux))
vimodl = modelL.models[Vband].eval(l) -  modelL.models[Iband].eval(l)
vkmodl = modelL.models[Vband].eval(l) -  modelL.models[Kband].eval(l)
vimods = modelS.models[Vband].eval(s) -  modelS.models[Iband].eval(s)
vkmods = modelS.models[Vband].eval(s) -  modelS.models[Kband].eval(s)
mod += [vimodl,vkmodl,vimods,vkmods]

filtlist = sdssfilts+ ['v-i lens', 'v-k lens','v-i source', 'v-k source']
# ein Tabular machen
for i in range(len(mod)):
    f = filtlist[i]
    print f, '& $','%.2f'%data[f]['mag'], r'\pm', '%.2f'%data[f]['sigma'], '$ & $', '%.2f'%mod[i], r'\\'

# also try out Gus' triangle plot
from tools.gus_plotting import triangle_plot
chain = np.loadtxt('/data/ljo31b/EELs/inference/new/212_'+name+'.dat')
triangle_plot(chain[180000:],cmap='Blues',nbins=20,axis_labels=[r'$\log \tau_{v,l}$',r'$\tau_l$',r'$T_l$',r'$\log Z_l$',r'$\log \tau_{v,s}$',r'$\tau_s$',r'$T_s$',r'$\log Z_s$',r'$\log M_l$', r'$\log M_s$'])
#triangle_plot(chain[4000:],cmap='Blues',nbins=20,axis_labels=[r'$\tau_l$',r'$\log Z_l$',r'$\log \tau_{v,s}$',r'$\log \tau_{v,l}$', r'$\log Z_s$','$T_l$', r'$\tau_s$', '$T_s$', r'$\log M_l$', r'$\log M_s$'])
pl.figtext(0.65,0.65,name+'\n X model',fontsize=40,horizontalalignment='center')
pl.savefig('/data/ljo31/Lens/TeXstuff/inference212new'+name+'.pdf')


# make table of inferred params. Masses are of course the most important
# get medians of distributions and uncertainties yawnyawnyawn

data = []
for quant in det.keys():
    print quant
    lo,med,hi = np.percentile(det[quant][3000:,0].flatten(),[16,50,84],axis=0)
    data.append([lo,med,hi])
np.save('/data/ljo31b/EELs/inference/new/212_params_'+name,np.array(data))

lo,med,hi=np.load('/data/ljo31b/EELs/inference/new/212_params_'+name+'.npy').T


print r'\begin{table}[H]'
print r'\centering'
print r'\begin{tabular}{ccccccc}\hline'
print r' & $T / Gyr$ & $\log(M/M_{\odot})$ & $\log Z/Z_{\odot}$ & $\log \tau_v (mag) $ & $\tau / Gyr$  \\\hline'
print name, '& lens & $', '%.2f'%med[-3], '\pm', '%.2f'%(med[-3]-lo[-3]), '$ & $', '%.2f'%med[-1], '\pm', '%.2f'%(med[-1]-lo[-1]), '$ & $', '%.2f'%med[1], '\pm', '%.2f'%(med[1]-lo[1]), '$ & $', '%.2f'%med[5], '\pm', '%.2f'%(med[5]-lo[5]), '$ & $', '%.2f'%med[0], '\pm', '%.2f'%(med[0]-lo[0]), r'$ \\'

print name, '& source & $', '%.2f'%med[3], '\pm', '%.2f'%(med[3]-lo[3]), '$ & $', '%.2f'%med[2], '\pm', '%.2f'%(med[2 ]-lo[2 ]), '$ & $', '%.2f'%med[8], '\pm', '%.2f'%(med[8]-lo[8]), '$ & $', '%.2f'%med[6], '\pm', '%.2f'%(med[6]-lo[6]), '$ & $', '%.2f'%med[4], '\pm', '%.2f'%(med[4]-lo[4]), r'$ \\'



print r'\end{tabular}'
print r'\caption{Lensing galaxies}'
print r'\end{table}'

'''
# just need to save masses for each lens!
array = np.array([med[-1],med[-1]-lo[-1],hi[-1]-med[-1], med[2], med[2]-lo[2],hi[2]-med[2]])
print array
filename = '/data/ljo31b/EELs/inference/new/masses.npy'
f = open(filename, "a+b")
np.save(f,array)
f.close()
'''

# for paper, probably want to just give masses, ages and tau. Quote standard unceretainties for now,m but will have to check because lots of them will be hitting limits.

#table
print name, 'lens & $', '%.2f'%med[-1], '\pm', '%.2f'%(med[-1]-lo[-1]), '$ & -- & $', '%.2f'%(med[-3]+astCalc.tl(zl)), '\pm', '%.2f'%(med[-3]-lo[-3]), '$ & -- & $', '%.2f'%med[0], '\pm', '%.2f'%(med[0]-lo[0]), r'$ \\'

print name, 'source & $', '%.2f'%med[2], '\pm', '%.2f'%(med[2 ]-lo[2 ]), '$ & -- & $','%.2f'%(med[3]+astCalc.tl(zs)), '\pm', '%.2f'%(med[3]-lo[3]), '$ & -- & $','%.2f'%med[4], '\pm', '%.2f'%(med[4]-lo[4]), r'$ \\\hline'

